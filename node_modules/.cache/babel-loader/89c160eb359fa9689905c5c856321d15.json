{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bvcbi\\\\OneDrive\\\\Desktop\\\\Storage\\\\git\\\\netflix\\\\src\\\\Components\\\\RowPost\\\\RowPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './RowPost.css';\nimport axios from '../../axios';\nimport Youtube from 'react-youtube';\nimport { API_KEY, imageUrl } from '../../constants/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RowPost(props) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [urlId, setUrlId] = useState('');\n  useEffect(() => {\n    axios.get(props.url).then(response => {\n      console.log(response.data);\n      setMovies(response.data.results);\n    });\n  }, []);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleMovie = id => {\n    console.log(id);\n    axios.get(`movie/${id}/videos?api_key=${API_KEY}&language=en-US`).then(response => {\n      if (response.data.results.length !== 0) {\n        setUrlId(response.data.results[0]);\n      } else {\n        console.log('Array empty');\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posters\",\n      children: movies.map(obj => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleMovie(obj.id),\n        className: props.isSmall ? 'smallPoster' : 'poster',\n        alt: \"poster\",\n        src: `${imageUrl + obj.backdrop_path}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), urlId && /*#__PURE__*/_jsxDEV(Youtube, {\n      opts: opts,\n      videoId: urlId.key\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RowPost, \"ihUknzojMIxMRJUwPW1ofTLhVM4=\");\n\n_c = RowPost;\nexport default RowPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"RowPost\");","map":{"version":3,"sources":["C:/Users/bvcbi/OneDrive/Desktop/Storage/git/netflix/src/Components/RowPost/RowPost.js"],"names":["React","useEffect","useState","axios","Youtube","API_KEY","imageUrl","RowPost","props","movies","setMovies","urlId","setUrlId","get","url","then","response","console","log","data","results","opts","height","width","playerVars","autoplay","handleMovie","id","length","title","map","obj","isSmall","backdrop_path","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,eAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAAQC,OAAR,EAAiBC,QAAjB,QAAiC,2BAAjC;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACpB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAK,CAACS,KAAD,EAAOC,QAAP,IAAmBV,QAAQ,CAAC,EAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAK;AACXE,IAAAA,KAAK,CAACU,GAAN,CAAUL,KAAK,CAACM,GAAhB,EAAqBC,IAArB,CAA0BC,QAAQ,IAAE;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAT,MAAAA,SAAS,CAACM,QAAQ,CAACG,IAAT,CAAcC,OAAf,CAAT;AACH,KAHD;AAIH,GALQ,EAKN,EALM,CAAT;AAMA,QAAMC,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAC;AADD;AAHH,GAAb;;AAOA,QAAMC,WAAW,GAAGC,EAAD,IAAO;AAEtBV,IAAAA,OAAO,CAACC,GAAR,CAAYS,EAAZ;AACAxB,IAAAA,KAAK,CAACU,GAAN,CAAW,SAAQc,EAAG,mBAAkBtB,OAAQ,iBAAhD,EAAkEU,IAAlE,CAAuEC,QAAQ,IAAE;AAC7E,UAAGA,QAAQ,CAACG,IAAT,CAAcC,OAAd,CAAsBQ,MAAtB,KAA+B,CAAlC,EAAoC;AAChChB,QAAAA,QAAQ,CAACI,QAAQ,CAACG,IAAT,CAAcC,OAAd,CAAsB,CAAtB,CAAD,CAAR;AACH,OAFD,MAEK;AACLH,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACC;AACJ,KAND;AAOH,GAVD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKV,KAAK,CAACqB;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACKpB,MAAM,CAACqB,GAAP,CAAYC,GAAD,iBAGZ;AAAK,QAAA,OAAO,EAAE,MAAIL,WAAW,CAACK,GAAG,CAACJ,EAAL,CAA7B;AAAuC,QAAA,SAAS,EAAEnB,KAAK,CAACwB,OAAN,GAAe,aAAf,GAA6B,QAA/E;AAAyF,QAAA,GAAG,EAAC,QAA7F;AAAsG,QAAA,GAAG,EAAG,GAAE1B,QAAQ,GAACyB,GAAG,CAACE,aAAc;AAAzI;AAAA;AAAA;AAAA;AAAA,cAHC;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ,EASMtB,KAAK,iBAAI,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEU,IAAf;AAAqB,MAAA,OAAO,EAAEV,KAAK,CAACuB;AAApC;AAAA;AAAA;AAAA;AAAA,YATf;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GAxCQ3B,O;;KAAAA,O;AA0CT,eAAeA,OAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport './RowPost.css'\r\nimport axios from '../../axios'\r\nimport Youtube from 'react-youtube'\r\nimport {API_KEY, imageUrl } from '../../constants/constants';\r\nfunction RowPost(props) {\r\n    const [movies, setMovies] = useState([]);\r\n    const[urlId,setUrlId] = useState('')\r\n    useEffect(() =>{\r\n        axios.get(props.url).then(response=>{\r\n            console.log(response.data)\r\n            setMovies(response.data.results)\r\n        })\r\n    }, [])\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            autoplay:1,\r\n        }\r\n    }\r\n    const handleMovie= (id) =>{\r\n        \r\n        console.log(id)\r\n        axios.get(`movie/${id}/videos?api_key=${API_KEY}&language=en-US`).then(response=>{\r\n            if(response.data.results.length!==0){\r\n                setUrlId(response.data.results[0])\r\n            }else{\r\n            console.log('Array empty')\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className='row'>\r\n            <h2>{props.title}</h2>\r\n            <div className='posters'>\r\n                {movies.map((obj)=>\r\n\r\n                \r\n                <img onClick={()=>handleMovie(obj.id)} className={props.isSmall ?'smallPoster':'poster'} alt='poster' src={`${imageUrl+obj.backdrop_path}`} />\r\n            )}\r\n            </div>\r\n            { urlId && <Youtube opts={opts} videoId={urlId.key}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RowPost\r\n"]},"metadata":{},"sourceType":"module"}